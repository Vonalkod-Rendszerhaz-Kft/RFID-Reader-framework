//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VRHReaderFrameworkCembritProcessor.CembritWS {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReadedTag", Namespace="http://schemas.datacontract.org/2004/07/Log4Pro.WCF.RFID")]
    [System.SerializableAttribute()]
    public partial class ReadedTag : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> RSSIField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TAGIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int readedCountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> RSSI {
            get {
                return this.RSSIField;
            }
            set {
                if ((this.RSSIField.Equals(value) != true)) {
                    this.RSSIField = value;
                    this.RaisePropertyChanged("RSSI");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TAGID {
            get {
                return this.TAGIDField;
            }
            set {
                if ((object.ReferenceEquals(this.TAGIDField, value) != true)) {
                    this.TAGIDField = value;
                    this.RaisePropertyChanged("TAGID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int readedCount {
            get {
                return this.readedCountField;
            }
            set {
                if ((this.readedCountField.Equals(value) != true)) {
                    this.readedCountField = value;
                    this.RaisePropertyChanged("readedCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResultBase", Namespace="http://schemas.datacontract.org/2004/07/Log4Pro.WCF.PDA.Results")]
    [System.SerializableAttribute()]
    public partial class ResultBase : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorMessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMessage {
            get {
                return this.ErrorMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMessageField, value) != true)) {
                    this.ErrorMessageField = value;
                    this.RaisePropertyChanged("ErrorMessage");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CembritWS.IRFIDService")]
    public interface IRFIDService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRFIDService/TagsReaded", ReplyAction="http://tempuri.org/IRFIDService/TagsReadedResponse")]
        VRHReaderFrameworkCembritProcessor.CembritWS.ResultBase TagsReaded(VRHReaderFrameworkCembritProcessor.CembritWS.ReadedTag[] ReadedTags, string ReaderId, string Errormessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRFIDService/TagsReaded", ReplyAction="http://tempuri.org/IRFIDService/TagsReadedResponse")]
        System.Threading.Tasks.Task<VRHReaderFrameworkCembritProcessor.CembritWS.ResultBase> TagsReadedAsync(VRHReaderFrameworkCembritProcessor.CembritWS.ReadedTag[] ReadedTags, string ReaderId, string Errormessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRFIDService/InputChanged", ReplyAction="http://tempuri.org/IRFIDService/InputChangedResponse")]
        VRHReaderFrameworkCembritProcessor.CembritWS.ResultBase InputChanged(string ReaderId, int InputID, bool InputState, string Errormessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRFIDService/InputChanged", ReplyAction="http://tempuri.org/IRFIDService/InputChangedResponse")]
        System.Threading.Tasks.Task<VRHReaderFrameworkCembritProcessor.CembritWS.ResultBase> InputChangedAsync(string ReaderId, int InputID, bool InputState, string Errormessage);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRFIDServiceChannel : VRHReaderFrameworkCembritProcessor.CembritWS.IRFIDService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RFIDServiceClient : System.ServiceModel.ClientBase<VRHReaderFrameworkCembritProcessor.CembritWS.IRFIDService>, VRHReaderFrameworkCembritProcessor.CembritWS.IRFIDService {
        
        public RFIDServiceClient() {
        }
        
        public RFIDServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RFIDServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RFIDServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RFIDServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public VRHReaderFrameworkCembritProcessor.CembritWS.ResultBase TagsReaded(VRHReaderFrameworkCembritProcessor.CembritWS.ReadedTag[] ReadedTags, string ReaderId, string Errormessage) {
            return base.Channel.TagsReaded(ReadedTags, ReaderId, Errormessage);
        }
        
        public System.Threading.Tasks.Task<VRHReaderFrameworkCembritProcessor.CembritWS.ResultBase> TagsReadedAsync(VRHReaderFrameworkCembritProcessor.CembritWS.ReadedTag[] ReadedTags, string ReaderId, string Errormessage) {
            return base.Channel.TagsReadedAsync(ReadedTags, ReaderId, Errormessage);
        }
        
        public VRHReaderFrameworkCembritProcessor.CembritWS.ResultBase InputChanged(string ReaderId, int InputID, bool InputState, string Errormessage) {
            return base.Channel.InputChanged(ReaderId, InputID, InputState, Errormessage);
        }
        
        public System.Threading.Tasks.Task<VRHReaderFrameworkCembritProcessor.CembritWS.ResultBase> InputChangedAsync(string ReaderId, int InputID, bool InputState, string Errormessage) {
            return base.Channel.InputChangedAsync(ReaderId, InputID, InputState, Errormessage);
        }
    }
}
