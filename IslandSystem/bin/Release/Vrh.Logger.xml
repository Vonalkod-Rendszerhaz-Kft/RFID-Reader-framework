<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Vrh.Logger</name>
    </assembly>
    <members>
        <member name="T:Vrh.Logger.iLoggerLogger">
            <summary>
            Alapértelmezett logger implementáció, konzolra logolási és debugger outputra logolási képességekkel kifejezetten fejlesztői célokkal
             MEF Export (ILogger interfész)
            </summary>
        </member>
        <member name="M:Vrh.Logger.iLoggerLogger.Log``1(System.UInt64,``0,System.Collections.Generic.IDictionary{System.String,System.String},System.Exception,Vrh.Logger.LogLevel,System.String,System.String,System.String,System.String,System.Int32,System.DateTime)">
            <summary>
            Logolás (ILogger interfész member)
            </summary>
            <typeparam name="T">Típuskijelölő</typeparam>
            <param name="noOfLogEntry">Log sorszáma a Logger létrejötte óta az adott alkalmazástérben</param>
            <param name="data">A kijelölt típusú adat</param>
            <param name="dataFields">Kulcs érték párok listájaként átadott adatok</param>
            <param name="exception">Egy exceptiont lehet ide bedobni, hogy a Logger az alapján logolja az exception fontos részleteit</param>
            <param name="level">A log szintje ennek a bejegyzésnek</param>
            <param name="sourceModul">Forrásmodul a Logger static Log hívásnak átadott típust deklaráló assembly neve kerül bele</param>
            <param name="sourceModulVersion">Forrásmodul verziója. Az assemblyben definiált AssemblyInformationalVersion, annak hiányában a definiált AssemblyVersion</param>
            <param name="sourceClass">Az osztály teljes neve, ahonnan a Log bejegyzést bedobták</param>
            <param name="sourceMethode">A metódus, neve, ahonnan a log bejegyzés érkezett (4.5 Framework-tól automatikus, az alatt a hívási helyen kell gondoskodni az átadásáról)</param>
            <param name="line">A forrás sor száma, ahonnan a Log hívás származik (4.5 Framework felett automatikus, az alatt  ahívási helyen kell gondoskodni az átadásáról)</param>
            <param name="callTimeStamp">A hívás időbéjege</param>
        </member>
        <member name="E:Vrh.Logger.iLoggerLogger.FatalErrorInPlugin">
            <summary>
            FatalErrorInPlugin esemény (ILogger interfész member)
            </summary>
        </member>
        <member name="M:Vrh.Logger.iLoggerLogger.WriteLogTxtLog(System.String)">
            <summary>
            Kiírja a txt log tagetbe a kapott bejegyzést
            </summary>
            <param name="logLine"></param>
        </member>
        <member name="M:Vrh.Logger.iLoggerLogger.OnFatalErrorInPlugin(System.Exception,System.String)">
            <summary>
            Metódus a FatalErrorInPlugin esemény elsütésére
            </summary>
            <param name="exception">Menteni kivánt kivétel</param>
            <param name="message">Szabadon beállítható üzenet a hibával kapcsolatban</param>
        </member>
        <member name="F:Vrh.Logger.iLoggerLogger._locker">
            <summary>
            Instance level locker for MT support
            </summary>
        </member>
        <member name="F:Vrh.Logger.iLoggerLogger.disposedValue">
            <summary>
            Dispose pattern: To detect redundant calls
            </summary>
        </member>
        <member name="M:Vrh.Logger.iLoggerLogger.Dispose(System.Boolean)">
            <summary>
            Dispose pattern
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Vrh.Logger.iLoggerLogger.Dispose">
            <summary>
            Dispose pattern: call this for dispose
            </summary>
        </member>
        <member name="T:Vrh.Logger.CallSignature">
            <summary>
            A napló szignaturával kapcsolatos összes függvényt tartalmazó osztály
            </summary>
        </member>
        <member name="M:Vrh.Logger.CallSignature.BuildCallSignature(System.UInt64,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Összeállítja a hívás szignaturát. Ezt a függvényt a különböző loggerek használják (pl DefaultLogger, iLoggerLogger).
                A static construktor meghívja, azért public, hogy le lehessen programozni egy olyan alkalmazás logikát, ahol app restart nélkül logger plugint cserélünk.
            </summary>
            <param name="noOfLogEntry">A log bejegyzés sorszáma</param>
            <param name="loggerclassname">A logger neve (DefaultLogger, vagy iLoggerLogger. this.getType().Name egy jó érték neki.</param>
            <param name="sourceModul">A hívást feladó assembly neve és a tartalmazó dll elérési útja egymástól pontosvesszővel elválasztva (;)</param>
            <param name="sourceModulVersion">A hívást feladó assembly/dll verziója.</param>
            <param name="sourceClass">A hívást feladó osztály neve</param>
            <param name="sourceMethode">A hívást feladó metódus neve.</param>
            <param name="line">A hívást tartalmazó sor száma.</param>
        </member>
        <member name="M:Vrh.Logger.CallSignature.SetCallSignature(System.Int32,System.Int32)">
            <summary>
            Összeállítja a hívás szignaturáját. 
            Ezt a függvényt az alkalmazásokban levő logger függvényben (ezen keresztül történik minden logolás az alkalmazásban) kell használni, ha a logolás nem a Vrh.Logger felhasználásával történik.
            A hívásban át kell adni a line paraméterben a logger függvény paramétereként definiált hívási hely sorszámot.
            Pl. a Datacontrollerben:
            public static void WriteLog(LogEntry entry, Type source = null, [CallerMemberName]string caller = "", [CallerLineNumber]int line = 0)
            {
            ...
                LogEntry logEntry = entry;
                logEntry.Source = CallSignature.SetCallSignature(line: line);
            ...
            }
            A szignatura felhasználása ebben az esetben igény szerinti, de az iLogger esetében javaslom a entry.source elemben elhelyezni.
            </summary>
            <param name="stacklevel">A hívási mélységet jelző szám. 1=a SetCallSignature hívás helye. 2=az alkalmazás logger függvényének hívási helye.</param>
            <param name="line">A hívó sor száma.</param>
        </member>
        <member name="M:Vrh.Logger.CallSignature.GetCallSignatureElements(System.String,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.Int32@)">
            <summary>
            A BuildCallSignature vagy a SetCallSignature által összeállított szignatúrát elemeire bontja.
            </summary>
            <param name="signature">A felbontandó szignatura</param>
            <param name="appdomain">Az alkalmazás domain neve.</param>
            <param name="apptype">Desktop, vagy Service(service name)</param>
            <param name="assemblyname">A hívást feladó assembly neve.</param>
            <param name="assemblyversion">A hívást feladó assembly/dll verziója.</param>
            <param name="assemblylocation">A hívást feladó assembly-t tartalmazó dll elérési útja</param>
            <param name="declaringclass">A hívást feladó osztály neve</param>
            <param name="callingmethodname">A hívást feladó metódus neve.</param>
            <param name="callinglinenumber">A hívást tartalmazó sor száma.</param>
        </member>
        <member name="M:Vrh.Logger.CallSignature.GetModul(System.Type)">
            <summary>
            Visszadja a hívó modul nevét (Mindig az átadott típust definálló Assembly neve)
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Vrh.Logger.CallSignature.GetModulVersion(System.Type)">
            <summary>
            Visszadja a hívó modul verzióját (Mindig az átadott típust definiáló Assembly verziója)
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Vrh.Logger.CallSignature.GetTypeFullName(System.Type)">
            <summary>
            Visszadja, hogy mi a típus neve (A hívás helyéről átadott típus)
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Vrh.Logger.LoggerConfigXmlProcessor">
            <summary>
            Logger config
            </summary>
        </member>
        <member name="M:Vrh.Logger.LoggerConfigXmlProcessor.#ctor(System.String)">
            <summary>
            Constructor 
            </summary>
            <param name="parameterFile">XML fájl aminek  afeldolgozásárta az osztály készül</param>
        </member>
        <member name="P:Vrh.Logger.LoggerConfigXmlProcessor.LogLevel">
            <summary>
            Logolás szointje
            </summary>
        </member>
        <member name="P:Vrh.Logger.LoggerConfigXmlProcessor.ConsoleLogging">
            <summary>
             Console-ra is küldje a logolást (csak ha a konzol jelen van a futási környezetben)
            </summary>
        </member>
        <member name="P:Vrh.Logger.LoggerConfigXmlProcessor.DebuggerLogging">
            <summary>
            A debugger outputra is küldje a logolást (csak ha a debugger csatklakoztatva van a futási környezetben)
            </summary>
        </member>
        <member name="P:Vrh.Logger.LoggerConfigXmlProcessor.FileLogging">
            <summary>
            File-ba is logoljon-e a default logger plugin
            </summary>
        </member>
        <member name="P:Vrh.Logger.LoggerConfigXmlProcessor.FileLoggingLogDirectory">
            <summary>
            Ide logol, ha a default plugin, ha a fileba logolás engedélyezve van.
            </summary>
        </member>
        <member name="P:Vrh.Logger.LoggerConfigXmlProcessor.FileLoggingLogFile">
            <summary>
            A log file neve, ha file-ba is logol a defdault plugin
            </summary>
        </member>
        <member name="P:Vrh.Logger.LoggerConfigXmlProcessor.UsedLogger">
            <summary>
            Visszadja  ahasználandó Logger pontos típusát
            </summary>
        </member>
        <member name="P:Vrh.Logger.LoggerConfigXmlProcessor.LoggerErrorLogDirectory">
            <summary>
            A könyvtár, ahová a Vrh.Logger a logolást megakadályozó kritikus hibákat Logolja
            </summary>
        </member>
        <member name="P:Vrh.Logger.LoggerConfigXmlProcessor.LoggerErrorLogFile">
            <summary>
            A fájl, ahová a Vrh.Logger a logolást megakadályozó kritikus hibákat Logolja
            </summary>
        </member>
        <member name="T:Vrh.Logger.LogHelper">
            <summary>
            Hasznos segéd szolgáltatások a logoláshoz 
            </summary>
        </member>
        <member name="M:Vrh.Logger.LogHelper.GetAccurateDateTimeValue(System.DateTime)">
            <summary>
            Visszaadja a kapott időpont nagy pontosságú string reprezentánsát 
            </summary>
            <param name="value">Időbélyeg jellegű adat</param>
            <returns>A kapott időbélyeg stringként</returns>
        </member>
        <member name="M:Vrh.Logger.LogHelper.GetExceptionInfo(System.Exception,System.Byte)">
            <summary>
            Kiszedi a kapott kivétel adatait egy szöveges leírássá
            </summary>
            <param name="ex">Exception, amelynek az adatait kigyűjtjük</param>
            <param name="indentLevel">Ennyi tab-bal identálja az információ minden egyes sorát</param>
            <returns>A kapott Exception adatai stringként</returns>
        </member>
        <member name="M:Vrh.Logger.LogHelper.GetExceptionData(System.Collections.IDictionary,System.Byte)">
            <summary>
            Visszadja egy IDictionary-ben tárolt kulcs érték párokat (pl.: Exception.Data)
            </summary>
            <param name="data">Idictionary gyűjtemény</param>
            <param name="indentLevel">Ennyivel lesz beindentálva</param>
            <returns></returns>
        </member>
        <member name="M:Vrh.Logger.LogHelper.GetDictionaryInfo(System.Collections.Generic.IDictionary{System.String,System.String},System.Byte)">
            <summary>
            Visszaadja a kapott Dictonary tartalmát emberi olvasásra formázott kulcs értékpárok listájaként
            </summary>
            <param name="dict">Az adatokat tartalmazó Dictionary</param>
            <param name="indentLevel">Ennyivel lesz beindentálva</param>
            <returns>Az adatok formázott stringként</returns>
        </member>
        <member name="M:Vrh.Logger.LogHelper.MakeIndent(System.String,System.Byte)">
            <summary>
            Tabokkal indentálja a kapott szöveg minden egyes sorát a paraméterben kapott számnak megfelelő számban
            </summary>
            <param name="input">Az indentálandó szöveg</param>
            <param name="indentLevel">Az indentálás szintje</param>
            <returns>Indentált szöveg</returns>
        </member>
        <member name="M:Vrh.Logger.LogHelper.HexControlChars(System.String,System.Byte,System.Char,System.Char)">
            <summary>
            A megadott sztring kontrolkaraktereit hex formátummá alakítja.
             A kontrol karakterek jelölésére használt keret karaktereket (frameStart, frameEnd), szintén hexa karakterkódra alakítja, ha előfordulnak az eredeti szövegben.
            </summary>
            <param name="str">A vezérlőkaraktereket is tartalmazó szöveg (string)</param>
            <param name="indentLevel">A formázott szöveg indentálásának a mértéke</param>
            <param name="frameStart">A vezérlőkarakterek hexakódjainak keretezésére ezt használja nyitó karakternek</param>
            <param name="frameEnd">A vezérlőkarakterek hexakódjainak keretezésére ezt használja záró karakternek</param>
            <returns>A formázott szöveg</returns>
        </member>
        <member name="M:Vrh.Logger.LogHelper.ArrayToHumanReadableString``1(``0[],System.Byte,System.Char)">
            <summary>
            Konvertál egy tömböt emberi fogyasztásra alkalmas stringé.
                A T-nek a tárolt értékre nézve releváns ToString overloaddal kell rendelkeznie, a helyes működéshez.
            </summary>
            <typeparam name="T">Típus kijelölő</typeparam>
            <param name="valueArray">Az értékeket tartalmazó tömb</param>
            <param name="indentLevel">A formázott szöveg indentálásának a mértéke</param>
            <param name="valueSeparator">Az értékeket egymástól elválasztó karakter a formázott szövegben.</param>
            <returns>A formázott szöveg</returns>
        </member>
        <member name="M:Vrh.Logger.LogHelper.BytesToHumanReadableString(System.Byte[],System.Byte)">
            <summary>
            A megadott bájt tömböt sAscii encodolással szöveggé alakítja, az esetleges vezérlőkaraktereket hexa értékre cserélve 
             Tipikus felhasználási területe alacsony szintű kommunikációs pufferek tartalmának logolása
            </summary>
            <param name="bytearray">A konvertálandó bytok sorozata</param>
            <param name="indentLevel">A formázott szöveg indentálásának a mértéke</param>
            <returns>A formázott szöveg</returns>
        </member>
        <member name="M:Vrh.Logger.LogHelper.BytesToHexBlock(System.Byte[],System.Boolean,System.Boolean,System.Text.Encoding,System.Byte)">
            <summary>
            Egy byte sorozatot HexBlock formázású, emberi olvasásra szánt stringgé alakít
            </summary>
            <param name="data">a bemenő bájtsorozat</param>
            <param name="header">megadja, hogy az első sor egy header legyen, amely magyarázza az adattartalmat</param>
            <param name="footer">megadja, hogy legyen e egy  hexablock véget értét hangsúlyozó lezárás a block végén</param>
            <param name="encoding">Beállítható vele, a használt karakter encoding, alapértelmezésben ASCII-t fog használni</param>
            <param name="indentLevel">Annyivel indentálja a hexa blockot</param>
            <returns>a formázott szöveg</returns>
        </member>
        <member name="M:Vrh.Logger.LogHelper.ExtractPropertyValuesToDataFields``1(``0)">
            <summary>
            Visszadja a paraméterben kapott objektum propertijeinek értékeit név-érték párok litsájaként (a property-n a ToString-et hívja az értékhez)
            </summary>
            <typeparam name="TClass">Ezzel az objektum típussal dolgozik</typeparam>
            <param name="instance">Ezzel a példánnyal</param>
            <returns>név-érték párok litáájaként a property-k neve és értéke</returns>
        </member>
        <member name="T:Vrh.Logger.FatalErrorInPluginEventHandler">
            <summary>
            Delegeta definició, a FatalErrorInPlugin event kezeléséhez
            </summary>
            <param name="pluginType">A plugin típusa, mindig adjuk át, hogy a Vrh.Logger keret releváns információt menthesen a hiba felépésének helyéről</param>
            <param name="e">Az esemény argumentumai, egy szöveges üzenetet, és egy tetszőleges szabványos Exception átadását támogatja</param>
        </member>
        <member name="T:Vrh.Logger.PluginFatalErrorEventArgs">
            <summary>
            EventArgs a FatalErrorInPlugin eseméynhez
            </summary>
        </member>
        <member name="P:Vrh.Logger.PluginFatalErrorEventArgs.Message">
            <summary>
            Szöveges információ a fellépett hibáról 
            </summary>
        </member>
        <member name="P:Vrh.Logger.PluginFatalErrorEventArgs.Exception">
            <summary>
            Itt adhatjuk át a feléppő, vagy a kiváltott Exception-t
            </summary>
        </member>
        <member name="P:Vrh.Logger.PluginFatalErrorEventArgs.RestartMe">
            <summary>
            Jelzi a logger keretnek, hogy indítsa újra a plugint 
            </summary>
        </member>
        <member name="T:Vrh.Logger.DefaultLogger">
            <summary>
            Alapértelmezett logger implementáció, konzolra logolási és debugger outputra logolási képességekkel kifejezetten fejlesztői célokkal
             MEF Export (ILogger interfész)
            </summary>
        </member>
        <member name="M:Vrh.Logger.DefaultLogger.Log``1(System.UInt64,``0,System.Collections.Generic.IDictionary{System.String,System.String},System.Exception,Vrh.Logger.LogLevel,System.String,System.String,System.String,System.String,System.Int32,System.DateTime)">
            <summary>
            Logolás (ILogger interfész member)
            </summary>
            <typeparam name="T">Típuskijelölő</typeparam>
            <param name="noOfLogEntry">Log sorszáma a Logger létrejötte óta az adott alkalmazástérben</param>
            <param name="data">A kijelölt típusú adat</param>
            <param name="dataFields">Kulcs érték párok listájaként átadott adatok</param>
            <param name="exception">Egy exceptiont lehet ide bedobni, hogy a Logger az alapján logolja az exception fontos részleteit</param>
            <param name="level">A log szintje ennek a bejegyzésnek</param>
            <param name="sourceModul">Forrásmodul a Logger static Log hívásnak átadott típust deklaráló assembly neve kerül bele</param>
            <param name="sourceModulVersion">Forrásmodul verziója. Az assemblyben definiált AssemblyInformationalVersion, annak hiányában a definiált AssemblyVersion</param>
            <param name="sourceClass">Az osztály teljes neve, ahonnan a Log bejegyzést bedobták</param>
            <param name="sourceMethode">A metódus, neve, ahonnan a log bejegyzés érkezett (4.5 Framework-tól automatikus, az alatt  ahívási helyen kell gondoskodni az átadásáról)</param>
            <param name="line">A forrás sor száma, ahonnan a Log hívás származik (4.5 Framework felett automatikus, az alatt  ahívási helyen kell gondoskodni az átadásáról)</param>
            <param name="callTimeStamp">A hívás időbéjege</param>
        </member>
        <member name="E:Vrh.Logger.DefaultLogger.FatalErrorInPlugin">
            <summary>
            FatalErrorInPlugin esemény (ILogger interfész member)
            </summary>
        </member>
        <member name="M:Vrh.Logger.DefaultLogger.WriteLogTxtLog(System.String)">
            <summary>
            Kiírja a txt log tagetbe a kapott bejegyzést
            </summary>
            <param name="logLine"></param>
        </member>
        <member name="M:Vrh.Logger.DefaultLogger.OnFatalErrorInPlugin(System.Exception,System.String)">
            <summary>
            Metódus a FatalErrorInPlugin esemény elsütésére
            </summary>
            <param name="exception">Menteni kivánt kivétel</param>
            <param name="message">Szabadon beállítható üzenet a hibával kapcsolatban</param>
        </member>
        <member name="F:Vrh.Logger.DefaultLogger._locker">
            <summary>
            Instance level locker for MT support
            </summary>
        </member>
        <member name="F:Vrh.Logger.DefaultLogger.disposedValue">
            <summary>
            Dispose pattern: To detect redundant calls
            </summary>
        </member>
        <member name="M:Vrh.Logger.DefaultLogger.Dispose(System.Boolean)">
            <summary>
            Dispose pattern
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Vrh.Logger.DefaultLogger.Dispose">
            <summary>
            Dispose pattern: call this for dispose
            </summary>
        </member>
        <member name="T:Vrh.Logger.Logger">
            <summary>
            !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            Static class az alakalmazáson belüli logoláshoz, csak visszamenőleges compatibiliztási okokból maradt meg!
             NE VALÓSÍTS MEG SEMMIT EBBEN AZ OSZTÁLYBAN!!! HASZNÁLD HELYETTE A VrhLogger class-t!!!
            !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            </summary>
        </member>
        <member name="M:Vrh.Logger.Logger.LoadLoggerPlugin(System.String)">
            <summary>
            Betölti a Logger által használt Plugint
                A static construktor meghívja, azért public, hogy le lehessen programozni egy olyan alkalmazás logikát, ahol app restart nélkül logger plugint cserélünk.
            </summary>
            <param name="config">A használt konfigurációt jelöli ki</param>
        </member>
        <member name="M:Vrh.Logger.Logger.Log(System.String,Vrh.Logger.LogLevel,System.Type,System.String,System.Int32)">
            <summary>
            Egyszerű string adat logolása.
            </summary>
            <param name="logMessage">Log üzenet</param>
            <param name="level">Logszint</param>
            <param name="source">Logolás forrása. Mindig egy típust (Type) kell átadni. Instance szintű tagoknál a this.GetType() kifejezést hazsnáljuk a paraméter értékadásához! 
                                    Static tagoknál a typeof(KonkrétClassNév) kifejezéssel adjuk át a típust.</param>
            <param name="caller">4.5 Frameworktől automatikusan kap értéket a CallerMemberName attribútumon át, sose adjunk meg értéket ennek a paraméternek! 4.5 alatti verzióknál a hívás helyén kell gondoskodni a kitöltéséről, ha használni akarjuk a logban ezt az adatot.</param>
            <param name="line">4.5 Frameworktől  Automatikusan kap értéket a CallerLineNumber attribútumon át, sose adjunk meg kézzel értéket ennek a paraméternek! 4.5 alatti verzióknál a hívás helyén kell gondoskodni a kitöltéséről, ha használni akarjuk a logban ezt az adatot.</param>
        </member>
        <member name="M:Vrh.Logger.Logger.Log(System.Exception,System.Type,Vrh.Logger.LogLevel,System.String,System.Int32)">
            <summary>
            Exception egyszerű logolása
            </summary>
            <param name="exception">Logolandó kivétel</param>
            <param name="source">Logolás forrása. Mindig egy típust (Type) kell átadni. Instance szintű tagoknál a this.GetType() kifejezést hazsnáljuk a paraméter értékadásához! 
                                    Static tagoknál a typeof(KonkrétClassNév) kifejezéssel adjuk át a típust.</param>
            <param name="level">Logszint</param>
            <param name="caller">4.5 Frameworktől automatikusan kap értéket a CallerMemberName attribútumon át, sose adjunk meg értéket ennek a paraméternek! 4.5 alatti verzióknál a hívás helyén kell gondoskodni a kitöltéséről, ha használni akarjuk a logban ezt az adatot.</param>
            <param name="line">4.5 Frameworktől  Automatikusan kap értéket a CallerLineNumber attribútumon át, sose adjunk meg kézzel értéket ennek a paraméternek! 4.5 alatti verzióknál a hívás helyén kell gondoskodni a kitöltéséről, ha használni akarjuk a logban ezt az adatot.</param>
        </member>
        <member name="M:Vrh.Logger.Logger.Log``1(``0,System.Collections.Generic.IDictionary{System.String,System.String},System.Exception,Vrh.Logger.LogLevel,System.Type,System.String,System.Int32)">
            <summary>
            Log bejegyzést ad fel (aszinkron!!!) a logoló modul számára
            </summary>
            <typeparam name="T">Típus</typeparam>
            <param name="data">Log adat, meg kell feleljen a generikusan meghatározott típusnak, vagy ennek a típusa határozza meg a generikust, ha nem jelöljük explicit</param>
            <param name="dataFields">A log bejegyzés adatai. Mezőnév/Mezőérték párok listájaként</param>
            <param name="exception">Egy exception adható át a Lognak</param>
            <param name="level">A logolás szintje. Az itt meghatározott szintűnek, vagy az alattinak kell a beállított logolási szintnek lennie, hogy a logolás meg is történjen a tényleges futási környezetben.</param>
            <param name="source">Logolás forrása. Mindig egy típust (Type) kell átadni. Instance szintű tagoknál a this.GetType() kifejezést hazsnáljuk a paraméter értékadásához! 
                                    Static tagoknál a typeof(KonkrétClassNév) kifejezéssel adjuk át a típust.</param>
            <param name="caller">4.5 Frameworktől automatikusan kap értéket a CallerMemberName attribútumon át, sose adjunk meg értéket ennek a paraméternek! 4.5 alatti verzióknál a hívás helyén kell gondoskodni a kitöltéséről, ha használni akarjuk a logban ezt az adatot.</param>
            <param name="line">4.5 Frameworktől  Automatikusan kap értéket a CallerLineNumber attribútumon át, sose adjunk meg kézzel értéket ennek a paraméternek! 4.5 alatti verzióknál a hívás helyén kell gondoskodni a kitöltéséről, ha használni akarjuk a logban ezt az adatot.</param>
        </member>
        <member name="M:Vrh.Logger.Logger.SetNoOfLogEntry(System.UInt64)">
            <summary>
            Segítségével implementálható a felhasználás helyén egy olyan szolgáltatás, amivel explicit módon beállítható, hogy mennyi legyen a Logsorszám 
            </summary>
            <param name="newNoOfLogEntry">Erre az értrékre áll be  asorszám, ha nincs mergadva, akkor 0</param>
        </member>
        <member name="T:Vrh.Logger.ILogger">
            <summary>
            Logger interfész, amelyet a Vrh.Logger használ
             A konkrét logger megoldásnak, vagy annak  awraperének ezt kell implementálnia.
             Az implementzáló típust meg kell jelőlni Export attribútummal!
            </summary>
        </member>
        <member name="M:Vrh.Logger.ILogger.Log``1(System.UInt64,``0,System.Collections.Generic.IDictionary{System.String,System.String},System.Exception,Vrh.Logger.LogLevel,System.String,System.String,System.String,System.String,System.Int32,System.DateTime)">
            <summary>
            Azt fogja hívni a Vrh.Logger a logok átadásához.
                A koncepció szerint a LogLevel-t a Vrh.Logger kezeli a konkrét logger plugin felett!
            </summary>
            <typeparam name="T">Típuskijelölő</typeparam>
            <param name="noOfLogEntry">Log sorszáma a Logger létrejötte óta az adott alkalmazástérben</param>
            <param name="data">A kijelölt típusú adat</param>
            <param name="dataFields">Kulcs érték párok listájaként átadott adatok</param>
            <param name="exception">Egy exceptiont lehet ide bedobni, hogy a Logger az alapján logolja az exception fontos részleteit</param>
            <param name="level">A log szintje ennek a bejegyzésnek</param>
            <param name="sourceModul">Forrásmodul a Logger static Log hívásnak átadott típust deklaráló assembly neve kerül bele</param>
            <param name="sourceModulVersion">Forrásmodul verziója. Az assemblyben definiált AssemblyInformationalVersion, annak hiányában a definiált AssemblyVersion</param>
            <param name="sourceClass">Az osztály teljes neve, ahonnan a Log bejegyzést bedobták</param>
            <param name="sourceMethode">A metódus, neve, ahonnan a log bejegyzés érkezett (4.5 Framework-tól automatikus, az alatt  ahívási helyen kell gondoskodni az átadásáról)</param>
            <param name="line">A forrás sor száma, ahonnan a Log hívás származik (4.5 Framework felett automatikus, az alatt  ahívási helyen kell gondoskodni az átadásáról)</param>
            <param name="callTimeStamp">A hívás időbéjege</param>
        </member>
        <member name="E:Vrh.Logger.ILogger.FatalErrorInPlugin">
            <summary>
            Esemény,a melyen keresztül a plugin visszajelzést tud kuldeni a működésében nbekövetkező kritikus hibákról.
                Minden esetben Dispose hívást, és recreatet eredményez a Pluginra nézve a Vrh.Logger keret szintjén!!!     
            </summary>
        </member>
        <member name="T:Vrh.Logger.LogLevel">
            <summary>
            A logolás lehetséges szintjei
            </summary>
        </member>
        <member name="F:Vrh.Logger.LogLevel.Debug">
            <summary>
            Debug részleteséget célzó logbejegyzések a működés részletes követésére, hibakeresésre
            </summary>
        </member>
        <member name="F:Vrh.Logger.LogLevel.Verbose">
            <summary>
            Részletes, bőbeszédű információk szintje
            </summary>
        </member>
        <member name="F:Vrh.Logger.LogLevel.Information">
            <summary>
            Információk a rendszer működéséről
            </summary>
        </member>
        <member name="F:Vrh.Logger.LogLevel.Warning">
            <summary>
            Figyelmeztetések szintje
            </summary>
        </member>
        <member name="F:Vrh.Logger.LogLevel.Error">
            <summary>
            A hibák szintje
            </summary>
        </member>
        <member name="F:Vrh.Logger.LogLevel.Fatal">
            <summary>
            A kritikus hibák szintje
            </summary>
        </member>
        <member name="F:Vrh.Logger.LogLevel.None">
            <summary>
            None segítségével kikapcsolható a teljes logolás, sose használjuk logbejegyzés szintjeként, mert a VRH.Logger az ilyen bejegyzéseket mindig elutasítja!
            </summary>
        </member>
        <member name="T:Vrh.Logger.VrhLogger">
            <summary>
            Static class az alakalmazáson belüli logoláshoz
            </summary>
        </member>
        <member name="M:Vrh.Logger.VrhLogger.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Vrh.Logger.VrhLogger.LoadLoggerPlugin(System.String)">
            <summary>
            Betölti a Logger által használt Plugint
                A static construktor meghívja, azért public, hogy le lehessen programozni egy olyan alkalmazás logikát, ahol app restart nélkül logger plugint cserélünk.
            </summary>
            <param name="config">A használt konfigurációt jelöli ki</param>
        </member>
        <member name="M:Vrh.Logger.VrhLogger.Log(System.String,Vrh.Logger.LogLevel,System.Type,System.String,System.Int32)">
            <summary>
            Egyszerű string adat logolása.
            </summary>
            <param name="logMessage">Log üzenet</param>
            <param name="level">Logszint</param>
            <param name="source">Logolás forrása. Mindig egy típust (Type) kell átadni. Instance szintű tagoknál a this.GetType() kifejezést hazsnáljuk a paraméter értékadásához! 
                                    Static tagoknál a typeof(KonkrétClassNév) kifejezéssel adjuk át a típust.</param>
            <param name="caller">4.5 Frameworktől automatikusan kap értéket a CallerMemberName attribútumon át, sose adjunk meg értéket ennek a paraméternek! 4.5 alatti verzióknál a hívás helyén kell gondoskodni a kitöltéséről, ha használni akarjuk a logban ezt az adatot.</param>
            <param name="line">4.5 Frameworktől  Automatikusan kap értéket a CallerLineNumber attribútumon át, sose adjunk meg kézzel értéket ennek a paraméternek! 4.5 alatti verzióknál a hívás helyén kell gondoskodni a kitöltéséről, ha használni akarjuk a logban ezt az adatot.</param>
        </member>
        <member name="M:Vrh.Logger.VrhLogger.Log(System.Exception,System.Type,Vrh.Logger.LogLevel,System.String,System.Int32)">
            <summary>
            Exception egyszerű logolása
            </summary>
            <param name="exception">Logolandó kivétel</param>
            <param name="source">Logolás forrása. Mindig egy típust (Type) kell átadni. Instance szintű tagoknál a this.GetType() kifejezést hazsnáljuk a paraméter értékadásához! 
                                    Static tagoknál a typeof(KonkrétClassNév) kifejezéssel adjuk át a típust.</param>
            <param name="level">Logszint</param>
            <param name="caller">4.5 Frameworktől automatikusan kap értéket a CallerMemberName attribútumon át, sose adjunk meg értéket ennek a paraméternek! 4.5 alatti verzióknál a hívás helyén kell gondoskodni a kitöltéséről, ha használni akarjuk a logban ezt az adatot.</param>
            <param name="line">4.5 Frameworktől  Automatikusan kap értéket a CallerLineNumber attribútumon át, sose adjunk meg kézzel értéket ennek a paraméternek! 4.5 alatti verzióknál a hívás helyén kell gondoskodni a kitöltéséről, ha használni akarjuk a logban ezt az adatot.</param>
        </member>
        <member name="M:Vrh.Logger.VrhLogger.Log``1(``0,System.Collections.Generic.IDictionary{System.String,System.String},System.Exception,Vrh.Logger.LogLevel,System.Type,System.String,System.Int32)">
            <summary>
            Log bejegyzést ad fel (aszinkron!!!) a logoló modul számára
            </summary>
            <typeparam name="T">Típus</typeparam>
            <param name="data">Log adat, meg kell feleljen a generikusan meghatározott típusnak, vagy ennek a típusa határozza meg a generikust, ha nem jelöljük explicit</param>
            <param name="dataFields">A log bejegyzés adatai. Mezőnév/Mezőérték párok listájaként</param>
            <param name="exception">Egy exception adható át a Lognak</param>
            <param name="level">A logolás szintje. Az itt meghatározott szintűnek, vagy az alattinak kell a beállított logolási szintnek lennie, hogy a logolás meg is történjen a tényleges futási környezetben.</param>
            <param name="source">Logolás forrása. Mindig egy típust (Type) kell átadni. Instance szintű tagoknál a this.GetType() kifejezést hazsnáljuk a paraméter értékadásához! 
                                    Static tagoknál a typeof(KonkrétClassNév) kifejezéssel adjuk át a típust.</param>
            <param name="caller">4.5 Frameworktől automatikusan kap értéket a CallerMemberName attribútumon át, sose adjunk meg értéket ennek a paraméternek! 4.5 alatti verzióknál a hívás helyén kell gondoskodni a kitöltéséről, ha használni akarjuk a logban ezt az adatot.</param>
            <param name="line">4.5 Frameworktől  Automatikusan kap értéket a CallerLineNumber attribútumon át, sose adjunk meg kézzel értéket ennek a paraméternek! 4.5 alatti verzióknál a hívás helyén kell gondoskodni a kitöltéséről, ha használni akarjuk a logban ezt az adatot.</param>
        </member>
        <member name="M:Vrh.Logger.VrhLogger.SetNoOfLogEntry(System.UInt64)">
            <summary>
            Segítségével implementálható a felhasználás helyén egy olyan szolgáltatás, amivel explicit módon beállítható, hogy mennyi legyen a Logsorszám 
            </summary>
            <param name="newNoOfLogEntry">Erre az értrékre áll be  asorszám, ha nincs mergadva, akkor 0</param>
        </member>
        <member name="M:Vrh.Logger.VrhLogger.LogThis(Vrh.Logger.LogLevel)">
            <summary>
            Megmondja, hogy a paraméterben kapott log szintet logolni kell-e a jelenlegi log szint beállítások mellett
            </summary>
            <param name="thisLevel">A logolandó bejegyzés log szintje</param>
            <returns></returns>
        </member>
        <member name="M:Vrh.Logger.VrhLogger.FatalErrorInPlugin_EventHandler(System.Type,Vrh.Logger.PluginFatalErrorEventArgs)">
            <summary>
            FatalErrorInPluginEventHandler delegate megvalósítás a plugin Error eventek kezelésére
            </summary>
            <param name="pluginType"></param>
            <param name="e"></param>
        </member>
        <member name="M:Vrh.Logger.VrhLogger.WriteLogMyTxtLog(System.String,Vrh.Logger.LogLevel)">
            <summary>
            A Logger kiegészitő txt logjába ír egy bejegyzést, ha a konfiguráción beállított loglevel nagyobb-egyenlő, mint a megadott logszint.
                Fatal szintet mindig kiírja!!!
            </summary>
            <param name="logLine">A kiirondó szöveg</param>
            <param name="level">Log szintje</param>
        </member>
        <member name="F:Vrh.Logger.VrhLogger._logger">
            <summary>
            A használt logger példánya
            </summary>
        </member>
        <member name="F:Vrh.Logger.VrhLogger._defaultLogger">
            <summary>
            Alapértelmezett logger
            </summary>
        </member>
        <member name="F:Vrh.Logger.VrhLogger._noOfLogEntry">
            <summary>
            A logbejegyzés száma
            </summary>
        </member>
        <member name="F:Vrh.Logger.VrhLogger._staticLocker">
            <summary>
            Static locker a többszálú helyes működéshez.
            </summary>
        </member>
        <member name="F:Vrh.Logger.VrhLogger._staticErrorLogFileWrtiteLocker">
            <summary>
            Lopcker a Modul saját hibagyűjtő fájljának írásának szinkronizációjához.
            </summary>
        </member>
    </members>
</doc>
