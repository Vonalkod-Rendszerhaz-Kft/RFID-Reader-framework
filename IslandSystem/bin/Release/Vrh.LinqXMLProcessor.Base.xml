<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Vrh.LinqXMLProcessor.Base</name>
    </assembly>
    <members>
        <member name="T:Vrh.LinqXMLProcessor.Base.ConfigProcessorEventHandler">
            <summary>
            Delegeta definició, a ConfigProcessorEvent event kezeléséhez
            </summary>
            <param name="e">Az esemény argumentumai</param>
        </member>
        <member name="T:Vrh.LinqXMLProcessor.Base.ConfigProcessorEventArgs">
            <summary>
            EventArgs a FatalErrorInPlugin eseméynhez
            </summary>
        </member>
        <member name="P:Vrh.LinqXMLProcessor.Base.ConfigProcessorEventArgs.Message">
            <summary>
            Szöveges információ a config feldolgozó eseményről 
            </summary>
        </member>
        <member name="P:Vrh.LinqXMLProcessor.Base.ConfigProcessorEventArgs.Exception">
            <summary>
            Itt adhatjuk át a feléppő, vagy a kiváltott Exception-t
            </summary>
        </member>
        <member name="P:Vrh.LinqXMLProcessor.Base.ConfigProcessorEventArgs.ConfigFile">
            <summary>
            Ez  aconfig fájl definició, ami alapján aktuálisan doilgozik a feldolgozó
            </summary>
        </member>
        <member name="P:Vrh.LinqXMLProcessor.Base.ConfigProcessorEventArgs.ConfigProcessor">
            <summary>
            A configprocessor class teljes neve, amelyből az üzenet származik 
            </summary>
        </member>
        <member name="T:Vrh.LinqXMLProcessor.Base.LinqXMLProcessorBaseClass">
            <summary>
            Object oriented XML processor base class
            </summary>
        </member>
        <member name="E:Vrh.LinqXMLProcessor.Base.LinqXMLProcessorBaseClass.ConfigProcessorEvent">
            <summary>
            ConfigProcessorEvent esemény (erre iratkozik fel  afelhazsnáló implementáció, ha kiváncsi a Config feldolgozás eseményeire)
            </summary>
        </member>
        <member name="M:Vrh.LinqXMLProcessor.Base.LinqXMLProcessorBaseClass.GetRootElement">
            <summary>
            Ez a függvény visszadja a root elem XElement objektumját.
                Felhasználható a konkrét implementációkra, de jellemzően az alaposztály Get... metódusai használják.
                Változtass az itteni implementáción, ha szükséges!
                Ennnek az implementációnak a főbb jellemzői:
                    - @ prefix jelzi, hogy a fájlnév tartalmazza az útvonalat is 
                        (ha nem @ jellel kezdünk: akkor úgy értelmezi, hogy csak a fájlnév van megadva és az a munkakönyvtár alatt van, vagy az munkakönyvtártól számított relatív útvonal)
                    - A könyvtár útvonalban a szokásos \ karakterek az elválasztók, de a fájl név után lehetősg van / jelet tenni, hogy jelezzük, hogy melyik XML tag a feldolgozó root tagje.
                        Arra is van lehetőség, hogy az XML-en belüli utvonalat definiáljunk itt ebben  aformában: /tag1/tag2/tag3 (XPath szerűen, de az Xpath fejlett szolgáltatásait nem támogatja ez az alapimplementáció)
                    - Az alaposztály minden Get szolgáltatása a GetRootElement-el indul, ez az implementáció itt mindig újratölti a fájlt.
            </summary>
            <returns>Root element</returns>
        </member>
        <member name="M:Vrh.LinqXMLProcessor.Base.LinqXMLProcessorBaseClass.OnConfigProcessorEvent(System.String,System.Exception)">
            <summary>
            Metódus a ConfigProcessorEvent esemény elsütésére
            </summary>
            <param name="exception">Kivétel</param>
            <param name="message">Infoermáció</param>
        </member>
        <member name="M:Vrh.LinqXMLProcessor.Base.LinqXMLProcessorBaseClass.GetXElement(System.String[])">
            <summary>
            Visszadja a root element-ből megadott element-eken át elérhető Element-et
            </summary>
            <param name="elementPath">útvonal</param>
            <returns>A keresett tag</returns>
        </member>
        <member name="M:Vrh.LinqXMLProcessor.Base.LinqXMLProcessorBaseClass.GetAllXElements(System.String[])">
            <summary>
            Visstzaadja a paraméterek által kijelölt útvonal alatt lévő összes az utolsó paraméterben megnevetzett TAG-et
            </summary>
            <param name="elementPath">útvonal + keresett TAG-ek neve utolsó elemként (ha az autosó eleemnek *-ot adunk meg, akkor az összes tag-et visszadja az utvonal alatt)</param>
            <returns></returns>
        </member>
        <member name="M:Vrh.LinqXMLProcessor.Base.LinqXMLProcessorBaseClass.GetElementValue``1(System.Xml.Linq.XElement,``0)">
            <summary>
            Visszadja az XML element értékét
            </summary>
            <typeparam name="T">A várt típus</typeparam>
            <param name="element">XMLElement objektum</param>
            <param name="defaultValue">Alapértelmezett érték, ha bármi miatt nem olvasható ki  akonfigurációból az érték, akkor ezt adja vissza</param>
            <returns></returns>
        </member>
        <member name="M:Vrh.LinqXMLProcessor.Base.LinqXMLProcessorBaseClass.GetAttribute``1(System.Xml.Linq.XElement,System.String,``0)">
            <summary>
            Visszadja az XML element alati, megnevezett attribútum értékét
            </summary>
            <typeparam name="T">A várt típus</typeparam>
            <param name="element">XMLElement objektum, ami alatt az attribútum található</param>
            <param name="attributeName">A keresett attríbutum neve</param>
            <param name="defaultValue">Alapértelmezett érték, ha bármi miatt nem olvasható ki  akonfigurációból az érték, akkor ezt adja vissza</param>
            <returns></returns>
        </member>
        <member name="M:Vrh.LinqXMLProcessor.Base.LinqXMLProcessorBaseClass.GetValue``1(System.String,``0)">
            <summary>
            A megadott típusra konvertál egy stringet, ha konverzui lehetséges
            </summary>
            <typeparam name="T">A várt típus</typeparam>
            <param name="stringValue">Az értéket reprezentáló string kifejezés</param>
            <param name="defultValue">Alapértelmezett érték, ha a kapott string nem konvertálható, akkor ezt fogja visszaadni</param>
            <returns></returns>
        </member>
        <member name="M:Vrh.LinqXMLProcessor.Base.LinqXMLProcessorBaseClass.GetValueWithMyConversionMethode``1(System.String,``0,System.Func{System.String,``0,``0})">
            <summary>
            String értéket konvertál a megadott típusra egy paraméterben kapott konverziós függvény segítségével
              A segítségével bővíthető a konverziók köre specáiális az impelemntációba fontos adatokra vonatkozó konverziókra
            </summary>
            <typeparam name="T">A várt típus</typeparam>
            <param name="stringValue">Az értéket reprezentáló string kifejezés</param>
            <param name="defultValue">Alapértelmezett érték, ha a kapott string nem konvertálható, akkor ezt fogja visszaadni</param>
            <param name="myConversionMethode">A konverziós függvény, amely a konverziót elvégzi</param>
            <returns></returns>
        </member>
        <member name="M:Vrh.LinqXMLProcessor.Base.LinqXMLProcessorBaseClass.GetIntAttribute(System.Xml.Linq.XElement,System.String,System.Int32)">
            <summary>
            Visszadja az XElementből a megadott attribútum int értékét
            </summary>
            <param name="element">XElement</param>
            <param name="attributeName">atribútum név</param>
            <param name="defaultValue">Alapértelmezett érték</param>
            <returns></returns>
        </member>
        <member name="M:Vrh.LinqXMLProcessor.Base.LinqXMLProcessorBaseClass.GetStringAttribute(System.Xml.Linq.XElement,System.String,System.String)">
            <summary>
            Visszadja az XElementből a megadott attribútum string értékét
            </summary>
            <param name="element">XElement</param>
            <param name="attributeName">Attribute név</param>
            <param name="defaultValue">Alapértelmezett érték</param>
            <returns>attribútum érték</returns>
        </member>
        <member name="M:Vrh.LinqXMLProcessor.Base.LinqXMLProcessorBaseClass.GetExtendedStringAttribute(System.Xml.Linq.XElement,System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Visszadja az XElement alatti megnevezett attríbútumban tárolt string értéket, de értelmezve az előírt szekvenciákat
             Mindig feloldja:
                - \\ perjel hívatkozások
                - \xFF, ahol FF a karakter ASCII kódja, amire kicseréli ezt a 4 karakter hosszú szekvenciák
                - Ismert ASCII elnevezések (Pl.: \ESC, \ACK, stb.)
             Továbbá amit definiálunk a changeValuePairs paraméterekben, ahol a key tartalmazza, amit cserélni kell, a value, amire (valueban megadhatóak \xFF jellegű ASCII kód definiciókat tartalmazó szövegek is)
            </summary>
            <param name="element">XElement</param>
            <param name="attributeName">Az attribútum, ahonnan az értéket kiolvassuk</param>
            <param name="defaultValue">alapértelmezett érték (ha az eleent hiányzik)</param>
            <param name="changeValuePairs">Ezen keresztül írunk elő egyedi stringcseréket</param>
            <returns></returns>
        </member>
        <member name="M:Vrh.LinqXMLProcessor.Base.LinqXMLProcessorBaseClass.GetBoolAttribute(System.Xml.Linq.XElement,System.String,System.Boolean)">
            <summary>
            Visszadja az XElementből a megadott attribútum bool értékét 
            </summary>
            <param name="element">XML Element</param>
            <param name="attributeName">attribútum neve</param>
            <param name="defaultValue">alapértelmezés</param>
            <returns>attribútum érték</returns>
        </member>
        <member name="M:Vrh.LinqXMLProcessor.Base.LinqXMLProcessorBaseClass.GetExtendedBoolAttribute(System.Xml.Linq.XElement,System.String,System.Boolean,System.String[])">
            <summary>
            Visszadja az XElementből a megadott attribútum bool értékét úgy hogy felsorolhatjuk, hogy mely stringek jelentsék a true értéket
            </summary>
            <param name="element">XML Element</param>
            <param name="attributeName">attribútum neve</param>
            <param name="defaultValue">alapértelmezés, ha nincs tag, vagy attribútum</param>
            <param name="trueValues">azon string érttéket,a mik true-t adnak (case insensitive!!!)</param>
            <returns>attribútum érték</returns>
        </member>
        <member name="M:Vrh.LinqXMLProcessor.Base.LinqXMLProcessorBaseClass.GetEnumAttributeValue``1(System.Xml.Linq.XElement,System.String,``0,System.Boolean)">
            <summary>
            Visszadja az attríbutúm értékét a mgehatározott enumként
            </summary>
            <typeparam name="TEnum">Enum</typeparam>
            <param name="element">XML Element</param>
            <param name="attributeName">attríbútum neve</param>
            <param name="defaultValue">alapértelmezett érték</param>
            <param name="caseSensitive">kis/nagybetű érzékeny-e?</param>
            <returns></returns>
        </member>
        <member name="M:Vrh.LinqXMLProcessor.Base.LinqXMLProcessorBaseClass.GetIntElementValue(System.Xml.Linq.XElement,System.Int32)">
            <summary>
            Visszadja a megadott XML TAG alatti int értéket 
            </summary>
            <param name="element">Element név</param>
            <param name="defaultValue">Alapértelmezett érték</param>
            <returns>Element érték</returns>
        </member>
        <member name="M:Vrh.LinqXMLProcessor.Base.LinqXMLProcessorBaseClass.GetStringElementValue(System.Xml.Linq.XElement,System.String)">
            <summary>
            Visszadja a megadott XML TAG alatti string értéket
            </summary>
            <param name="element">Element név</param>
            <param name="defaultValue">Ezt az értéket adja, ha nincs ilyen tag</param>
            <returns>Element érték</returns>
        </member>
        <member name="M:Vrh.LinqXMLProcessor.Base.LinqXMLProcessorBaseClass.GetExtendedStringElementValue(System.Xml.Linq.XElement,System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Visszadja az XElementben tárolt string értéket, de értelmezve az előírt szekvenciákat
             Mindig feloldja:
                - \\ perjel hívatkozások
                - \xFF, ahol FF a karakter ASCII kódja, amire kicseréli ezt a 4 karakter hosszú szekvenciák
                - Ismert ASCII elnevezések (Pl.: \ESC, \ACK, stb.)
             Továbbá amit definiálunk a changeValuePairs paraméterekben, ahol a key tartalmazza, amit cserélni kell, a value, amire (valueban megadhatóak \xFF jellegű ASCII kód definiciókat tartalmazó szövegek is)
            </summary>
            <param name="element">XElement</param>
            <param name="defaultValue">alapértelmezett érték (ha az eleent hiányzik)</param>
            <param name="changeValuePairs">Ezen keresztül írunk elő egyedi stringcseréket</param>
            <returns></returns>
        </member>
        <member name="M:Vrh.LinqXMLProcessor.Base.LinqXMLProcessorBaseClass.GetBoolElementValue(System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Visszadja a megadott XML TAG alatti bool értéket
            </summary>
            <param name="element">XML Element</param>
            <param name="defaultValue">Ezt az értéket adja, ha nincs ilyen tag</param>
            <returns>Element érték</returns>
        </member>
        <member name="M:Vrh.LinqXMLProcessor.Base.LinqXMLProcessorBaseClass.GetExtendedBoolElementValue(System.Xml.Linq.XElement,System.Boolean,System.String[])">
            <summary>
            Visszadja a megadott XML TAG alatti bool értéket úgy hogy felsorolhatjuk, hogy mely stringek jelentsék a true értéket
            </summary>
            <param name="element">XML Element</param>
            <param name="defaultValue">Ezt az értéket adja, ha nincs ilyen tag, vagy nincs értéke</param>
            <param name="trueValues">azon string érttéket,a mik true-t adnak (case insensitive!!!)</param>
            <returns>Element érték</returns>
        </member>
        <member name="M:Vrh.LinqXMLProcessor.Base.LinqXMLProcessorBaseClass.GetEnumValue``1(System.Xml.Linq.XElement,``0,System.Boolean)">
            <summary>
            Visszadja a megadott XML TAG alatti Enum értéket, ha nem található, vagy nem érvényes értéket tartalmaz, akkor a defaultValue-ban beállított értéket adja
            </summary>
            <typeparam name="TEnum">A konkrétz Enum</typeparam>
            <param name="element">XML Element</param>
            <param name="defaultValue">Alapértelmezett érték, ha nincs beállítva akkor a megadott enum defultja (default(TEnum))</param>
            <param name="caseSensitive">Kis-nagybetű érzékeny legyen-e az Enummá alakítás</param>
            <returns></returns>
        </member>
        <member name="F:Vrh.LinqXMLProcessor.Base.LinqXMLProcessorBaseClass.MODULEPREFIX">
            <summary>
            A ConfigProcessor hiba eseményeinek logolása
            </summary>
        </member>
        <member name="F:Vrh.LinqXMLProcessor.Base.LinqXMLProcessorBaseClass._xmlNameSpace">
            <summary>
            XML namespace tárolására szolgáló field (Származtatott osztályban tölteni!)
            </summary>
        </member>
        <member name="F:Vrh.LinqXMLProcessor.Base.LinqXMLProcessorBaseClass._xmlFileDefinition">
            <summary>
            Az XML-t definiáló string [útvonal]fájlnév[xml-en belüli path]
            </summary>
        </member>
        <member name="M:Vrh.LinqXMLProcessor.Base.LinqXMLProcessorBaseClass.ResolveAsciiNames(System.String)">
            <summary>
            Kicseréli  abejövő stringne a megadott ASCII elnevezés hívatkozásokat a megfelelő ASCI kódra (Pl.: \ESC --> chr(27)) 
            </summary>
            <param name="inputStrings">bejövő string</param>
            <returns></returns>
        </member>
        <member name="M:Vrh.LinqXMLProcessor.Base.LinqXMLProcessorBaseClass.GetExtendedString(System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            A bemenő stringen elvégzi a kódcseréket, és visszadja az így előállított stringet
             Cseréli a /xAA hexa karakterkódokat, és a dupla perjeleket, agyébként amit előírunk a changeValuePairs paraméterekben
            </summary>
            <param name="inputString">bemenő string</param>
            <param name="changeValuePairs">pluszban definiált cserék</param>
            <returns></returns>
        </member>
        <member name="M:Vrh.LinqXMLProcessor.Base.LinqXMLProcessorBaseClass.GetCurrentMethodName">
            <summary>
            Visszaadja a metódus nevét, ahonnan hívtuk.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vrh.LinqXMLProcessor.Base.LinqXMLProcessorBaseClass.GetElementPath(System.Xml.Linq.XElement)">
            <summary>
            Visszadja  az element útvonalát
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Vrh.LinqXMLProcessor.Base.LinqXMLProcessorBaseClass.GetAttributePath(System.Xml.Linq.XAttribute)">
            <summary>
            Visszadja az attribute-ot tartalmazó XML elementek patját
            </summary>
            <param name="attribute">Az attributum</param>
            <returns></returns>
        </member>
        <member name="M:Vrh.LinqXMLProcessor.Base.LinqXMLProcessorBaseClass._fileWatcher_Changed(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            File megváltozott esemény
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:Vrh.LinqXMLProcessor.Base.LinqXMLProcessorBaseClass._rootelement">
            <summary>
            Az XML letárolt root eleme
            </summary>
        </member>
        <member name="F:Vrh.LinqXMLProcessor.Base.LinqXMLProcessorBaseClass._configFileChanged">
            <summary>
            Jelzi, hogy a configfile megváltozott
            </summary>
        </member>
        <member name="F:Vrh.LinqXMLProcessor.Base.LinqXMLProcessorBaseClass._locker">
            <summary>
            Instance Locker
            </summary>
        </member>
        <member name="F:Vrh.LinqXMLProcessor.Base.LinqXMLProcessorBaseClass._fileWatcher">
            <summary>
            FileWatcher a konfig fájl megváltozásának detektálásához
            </summary>
        </member>
        <member name="F:Vrh.LinqXMLProcessor.Base.LinqXMLProcessorBaseClass.MODUL_PREFIX">
            <summary>
            A modulhoz tartzozó dolgok (pl app settings beállítások) prefixe
            </summary>
        </member>
    </members>
</doc>
