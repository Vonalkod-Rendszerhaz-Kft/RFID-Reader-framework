<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VRH.Common</name>
    </assembly>
    <members>
        <member name="T:VRH.Common.EntryAsseblyFixer">
            <summary>
            Dinamikus host környezetekeben, ameilyen a TestFrameworkök, vagy egy ASP.NET MVC alaklamazás, beállítja az Entry Assembly értékét, 
            hogy a GetEntryAssembly hívásokl ne nullt vagy dinamyc assemblyt adjanak vissza
            </summary>
        </member>
        <member name="M:VRH.Common.EntryAsseblyFixer.FixIt">
            <summary>
            Ellenőrzi és, ha szükséges javítja az alakalmazsátérhez tartozó EntryAssembly-t
            - TestFramework esetén a hostoló framework assemblyje lesz beállítva
            - ASP.NET MVC alaklamazásoknál a Webalaklamazást megvalósító assembly
            - Minden más esetben, amikor az EntryAssembly ezen módszerek utzán is null, vagy dynamic maradna, akkor a Vrh.Common.dll kerül beáállításra ENtry assembly-ként
            </summary>
        </member>
        <member name="M:VRH.Common.EntryAsseblyFixer.SetEntryAssembly(System.Reflection.Assembly)">
            <summary>
            Beállítja az application domain EntryAssembly tulajdonságát a megadott assemblyre
            </summary>
            <param name="assembly">Az assembly</param>
        </member>
        <member name="T:VRH.Common.OrderDirection">
            <summary>
            Direction of order
            </summary>
        </member>
        <member name="F:VRH.Common.OrderDirection.Ascending">
            <summary>
            Ascending order direction
            </summary>
        </member>
        <member name="F:VRH.Common.OrderDirection.Descending">
            <summary>
            Descending order direction
            </summary>
        </member>
        <member name="T:VRH.Common.EntityFrameworkQueryHelper">
            <summary>
            Helpers for Entity Framework Query-s
            </summary>
        </member>
        <member name="M:VRH.Common.EntityFrameworkQueryHelper.SmartOrder``1(System.Linq.IQueryable{``0},System.String,VRH.Common.OrderDirection)">
            <summary>
            Smart Order function for IQueriable
            </summary>
            <typeparam name="T">Type of entity</typeparam>
            <param name="source">IQueryable instance to order</param>
            <param name="propertyName">Order this Entity property (Field)</param>
            <param name="orderDirection">Order direction</param>
            <returns>IOrderedQueryable (apply order in source)</returns>
        </member>
        <member name="M:VRH.Common.EntityFrameworkQueryHelper.AlreadyOrdered``1(System.Linq.IQueryable{``0})">
            <summary>
            Megmondja egy IQueryable-ről, hogy rendezett-e már
            </summary>
            <typeparam name="T">Type paraméter</typeparam>
            <param name="source">IQueriable példány, amire alkalmazzuk</param>
            <returns>Rendetzett (True), vagy sem (False)</returns>
        </member>
        <member name="F:VRH.Common.EntityFrameworkQueryHelper._orderByMethod">
            <summary>
            OrderBy method in the Queryable implementation
            </summary>
        </member>
        <member name="F:VRH.Common.EntityFrameworkQueryHelper._thenByMethod">
            <summary>
            ThenBy method in the Queryable implementation
            </summary>
        </member>
        <member name="F:VRH.Common.EntityFrameworkQueryHelper._orderByDescendingMethod">
            <summary>
            OrderByDescending method in the Queryable implementation
            </summary>
        </member>
        <member name="F:VRH.Common.EntityFrameworkQueryHelper._thenByDescendingMethod">
            <summary>
            ThenByDescendingMethod method in the Queryable implementation
            </summary>
        </member>
        <member name="M:VRH.Common.EntityFrameworkQueryHelper.PropertyExists``1(System.String)">
            <summary>
            This property is Exists in T type?
            </summary>
            <typeparam name="T">Type of entity</typeparam>
            <param name="propertyName">name of property</param>
            <returns></returns>
        </member>
        <member name="T:VRH.Common.ExtensionMethods">
            <summary>
            Class of Vrh's extension methods
            </summary>
            <summary>
            Class of Vrh's extension methods
            </summary>
            <summary>
            Class of Vrh's extension methods
            </summary>
            <summary>
            Class of Vrh's extension methods
            </summary>
        </member>
        <member name="M:VRH.Common.ExtensionMethods.GetEnumData``1(System.Enum,System.String)">
            <summary>
            Visszadja a megadott kulccsal az enum értékhez kötött EnumData értékét
            </summary>
            <typeparam name="K">A kulcs típusa</typeparam>
            <typeparam name="V">Az érték típusa</typeparam>
            <param name="enumerationValue">Enum érték</param>
            <param name="dataId">EnumData adat kulcsa</param>
            <returns></returns>
        </member>
        <member name="M:VRH.Common.ExtensionMethods.Version(System.Reflection.Assembly)">
            <summary>
            Visszadja az Assembly definiált verzióját
            </summary>
            <param name="assembly">az assembly példány</param>
            <returns></returns>
        </member>
        <member name="M:VRH.Common.ExtensionMethods.AssemblyAttribute``1(System.Reflection.Assembly)">
            <summary>
            Visszadja az Assemblyben definiált atribútum értékét
            </summary>
            <typeparam name="T">Az assembly attribútum, aminek az értékét meg akarjuk kapni</typeparam>
            <param name="assembly">az assembly példány</param>
            <returns></returns>
        </member>
        <member name="M:VRH.Common.ExtensionMethods.FromHexOrThis(System.String)">
            <summary>
            If a string starts with \x or 0x returns the interpeted hex string, otherwise the string itself
            </summary>
            <param name="hex">String</param>
            <returns>The string of the interpreted version of hexa codes</returns>
        </member>
        <member name="M:VRH.Common.ExtensionMethods.AppendWithSeparator(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            Hozzáfűzi  amegadott stringet a stringbuóilderhez, a megadott separátor használatával
            </summary>
            <param name="text">a stringbuilder példány</param>
            <param name="value">ezt  az értéket adja hozzá</param>
            <param name="separator">ezt használva separátornak</param>
        </member>
        <member name="M:VRH.Common.ExtensionMethods.Reverse(System.Text.StringBuilder,System.String)">
            <summary>
            Adott egy stringbuilder ahol a hozzáadott értékeket egy adott separátor választja el. 
            Ez a metódus megfordítja ezt a listát.
            Mire jó ez? Például egy XML elementnek a paerentjein végiglépkedve összegyűjtöd a pathot, egyszerüen egy stringbuildetrbe dobálva, az elemeket egy / separétorral. (AppendWithSeparator) 
            A végén pont fordítva van, mint egy XML path. Ekkor megfordítod ezzel az Extension methoddal...  
            </summary>
            <param name="text">a stringbuilder példány</param>
            <param name="separator">Ez  ahasznált separátor (ez választja el az elemeket)</param>
        </member>
        <member name="T:VRH.Common.EnumDataAttribute">
            <summary>
            Segítségével adatok füzhetők fel egy enum értékre 
            </summary>
        </member>
        <member name="M:VRH.Common.EnumDataAttribute.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:VRH.Common.EnumDataAttribute.Id">
            <summary>
            Adat azonosítója
            </summary>
        </member>
        <member name="P:VRH.Common.EnumDataAttribute.Value">
            <summary>
            Érték
            </summary>
        </member>
        <member name="T:VRH.Common.IManage`1">
            <summary>
            Meghatározza és előírja egy karbantartást és hozzáférést 
            biztosító osztály elvárt tulajdonságait és módszereit.
            </summary>
        </member>
        <member name="P:VRH.Common.IManage`1.All">
            <summary>
            A kezelt típust összes egyedét szolgáltató tulajdonság.
            </summary>
        </member>
        <member name="M:VRH.Common.IManage`1.Get(System.Int32)">
            <summary>
            A kezelt típus egy elemét adja vissza az egyedi azonosító segítségével.
            </summary>
            <param name="id">Az elem egyedi azonosítója.</param>
            <returns>A kezelt típus egy eleme vagy null.</returns>
        </member>
        <member name="M:VRH.Common.IManage`1.Get(System.String)">
            <summary>
            A kezelt típus egy elemét adja vissza a megadott név segítségével.
            </summary>
            <param name="name">Az elem egyedi neve.</param>
            <returns>A kezelet típus egy eleme vagy null.</returns>
        </member>
        <member name="M:VRH.Common.IManage`1.Create(`0)">
            <summary>
            Létrehozza a kezelt típus egy elemét.
            </summary>
            <param name="item">A kezelt típus egy eleme, amit hozzá kell adni.</param>
        </member>
        <member name="M:VRH.Common.IManage`1.Delete(System.Int32)">
            <summary>
            A kezelt típus egy elemét törli az egyedi azonosító alapján.
            </summary>
            <param name="id">A törlendő elem egyedi azonosítója.</param>
        </member>
        <member name="M:VRH.Common.IManage`1.Delete(System.String)">
            <summary>
            A kezelt típus egy elemét törli az egyedi neve alapján.
            </summary>
            <param name="name">A törlendő elem egyedi neve.</param>
        </member>
        <member name="M:VRH.Common.IManage`1.Update(`0)">
            <summary>
            A kezelt típus egy elemének módosítása.
            Ha nem létezik az hiba.
            </summary>
            <param name="item">A kezelt típus egy eleme.</param>
        </member>
        <member name="T:VRH.Common.CheckListJSON">
            <summary>
            Egy meghívott akció válaszüzenetének egy lehetséges meghatározott szerkezete.
            Valamely lista ellenőrzéshez használható, amelyben a Checked oszlopban jelölhető az ellenőrzés eredménye.
            </summary>
            <remarks>
            Azért itt, mert olyan helyeken is használható, ahol még nincsenek WEB alkalmazásra jellemző összetevők.
            </remarks>
        </member>
        <member name="P:VRH.Common.CheckListJSON.Value">
            <summary>
            Az ellenőrzendő illetve ellenőrzött azonosító.
            </summary>
        </member>
        <member name="P:VRH.Common.CheckListJSON.Text">
            <summary>
            Az ellenőrzéskor megtalált név vagy leíró.
            </summary>
        </member>
        <member name="P:VRH.Common.CheckListJSON.Checked">
            <summary>
            Az ellenőrzés eredményét jelző logikai érték, mely a felhasználáskor
            az üzleti logikától függ.
            </summary>
        </member>
        <member name="T:VRH.Common.ReturnDictJSON">
            <summary>
            Egy meghívott akció által visszaadott adatokhoz egy lehetséges szerkezet.
            A Name az adatstruktúrához rendelt megnevezést tartalmazhat, amit pl. a
            WebForm használ az adatokat megjelenító táblázat fejléceként.
            </summary>
            <remarks>
            Azért itt, mert olyan helyeken is használható, ahol még nincsenek WEB alkalmazásra jellemző összetevők.
            </remarks>
        </member>
        <member name="P:VRH.Common.ReturnDictJSON.Name">
            <summary>
            Az adat szótár elnevezése.
            </summary>
        </member>
        <member name="P:VRH.Common.ReturnDictJSON.Dict">
            <summary>
            Az alapértelmezett szótár.
            </summary>
        </member>
        <member name="T:VRH.Common.ReturnInfoJSON">
            <summary>
            Egy meghívott akció válaszüzenetének egy lehetséges meghatározott szerkezete.
            A válasz érték (ReturnValue) és üzenet (ReturnMessage) formájú. 
            Sikeres végrehajtás esetén mindig 0 legyen a ReturnValue.
            Sikertelen esetben ettől eltérő, de ha nincs egyéb ok, akkor hiba esetén legyen -1.
            Alapértelmezett érték: 0, "Az indított akció sikeresen lezajlott!" }
            </summary>
            <remarks>
            Azért itt, mert olyan helyeken is használható, ahol még nincsenek WEB alkalmazásra jellemző összetevők.
            </remarks>
        </member>
        <member name="P:VRH.Common.ReturnInfoJSON.ReturnValue">
            <summary>
            Egy reprezentatív értéke, mely a sikerességtől függ.
            Ha nincs hiba az akció végrehajtásában, akkor 0 legyen az értéke.
            Alapértelmezett értéke: 0
            </summary>
        </member>
        <member name="P:VRH.Common.ReturnInfoJSON.ReturnMessage">
            <summary>
            Az akció üzenete. Hiba esetén a hibaüzenet szövege.
            Alapértelmezett értéke: "Az indított akció sikeresen lezajlott!"
            </summary>
        </member>
        <member name="T:VRH.Common.SelectListJSON">
            <summary>
            Egy meghívott akció válaszüzenetének egy lehetséges meghatározott szerkezete.
            Egy listához használható, mely értékeit és azonosítóit fel lehet használni.
            </summary>
            <remarks>
            Egyenértékű a System.Web.Mvc.SelectListItem osztállyal, de nem onnan származik.
            Az ott szereplő leírás: 
            "Represents the selected item in an instance of the System.Web.Mvc.SelectList class."
            </remarks>
            <remarks>
            Azért itt, mert olyan helyeken is használható, ahol még nincsenek WEB alkalmazásra jellemző összetevők.
            </remarks>
        </member>
        <member name="P:VRH.Common.SelectListJSON.Disabled">
            <summary>
            Jelzi, hogy ez az elem a listában letiltott.
            </summary>
        </member>
        <member name="P:VRH.Common.SelectListJSON.Group">
            <summary>
            A csoport jelölése. Alapértelmezett értéke: null
            </summary>
        </member>
        <member name="P:VRH.Common.SelectListJSON.Selected">
            <summary>
            Jelzi, hogy ez az elem a listában kiválasztott.
            </summary>
        </member>
        <member name="P:VRH.Common.SelectListJSON.Text">
            <summary>
            A listelem szövege, ami megjelenik.
            </summary>
        </member>
        <member name="P:VRH.Common.SelectListJSON.Value">
            <summary>
            A listelem értéke.
            </summary>
        </member>
        <member name="T:VRH.Common.SelectListGroup">
            <summary>
            Represents the optgroup HTML element and its attributes. In a select list, 
            multiple groups with the same name are supported. 
            They are compared with reference equality.
            </summary>
            <remarks>
            A System.Mvc.SelectListItem-mel való kompatibilitás miatt van itt.
            A 'summary' szövege is onnan másolt.
            </remarks>
        </member>
        <member name="P:VRH.Common.SelectListGroup.Disabled">
            <summary>
            Beállítja, hogy az adott csoport engedélyezett-e.
            </summary>
        </member>
        <member name="P:VRH.Common.SelectListGroup.Name">
            <summary>
            A csoport neve.
            </summary>
        </member>
        <member name="M:VRH.Common.VRHApplicationSettings.GetSettingsAsString(System.String,System.String,System.String)">
            <summary>
            Visszadja az App.Config egy megadott szekciócsoport alatti megadott szekcióban lévő megadott beállítás értékét String-ként.
            </summary>
            <param name="sectionGroup">Szekciócsoport</param>
            <param name="section">Szekció</param>
            <param name="setting">Beállítás</param>
            <returns>A beállítás értéke Stringként.</returns>
        </member>
        <member name="M:VRH.Common.VRHApplicationSettings.GetApplicationSettingsAsString(System.String,System.String)">
            <summary>
            Visszadja az applicationSettings szekciócsoport alatt lévő megadott szekcióban található megadott beállítás értékét String-ként.
            </summary>
            <param name="section">Szekció</param>
            <param name="setting">Beállítás</param>
            <returns>A beállítás értéke Stringként.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:VRH.Common.CommandLine.GetCommandLineArgument(System.String[],System.String,System.Boolean)" -->
        <member name="M:VRH.Common.CommandLine.IsCorrectPath(System.String)">
            <summary>
            a megadott karaktersorozatról eldönti, hogy szabályos elérési út-e (ebben az esetben true értékkel tér vissza)
            </summary>
            <param name="path">a karaktersorozat</param>
        </member>
        <member name="M:VRH.Common.CommandLine.IsFullPath(System.String)">
            <summary>
            a megadott elérési útról eldönti, hogy abszolut, vagy relatív
            </summary>
            <param name="path">egy szabályos(!) elérési út</param>
        </member>
        <member name="M:VRH.Common.CommandLine.SetAppConfigFile(System.String)">
            <summary>
            a megadott elérési úton levő file-t használja appconfig file-ként; a Main() program indulása után azonnal, még az appconfig-ban levő adatok használata előtt kell végrehajtani
            </summary>
            <param name="appconfigpath">az appconfig file elérési útja</param>
        </member>
        <member name="T:VRH.Common.FixStack`1">
            <summary>
            Egy olyan generikus stack mely fix méretű. Ha elérte a méretét, és újabb elemet dobunk bele, akkor a legelőször bedobott elem esik ki, de az új elem nem ennek helyére, hanem astack tetejére kerül.
            Jól használható, például, arra, ha egy objektumnak mondjuk státusz üzeneteket kell gyűjtenie, vagy utolsó X darab mérési eredményt. 
            </summary>
            <typeparam name="T">Ilyen típusú objektumokat tárol a stack</typeparam>
        </member>
        <member name="M:VRH.Common.FixStack`1.#ctor">
            <summary>
            Construktor 50 elemű stacket definiál
            </summary>
        </member>
        <member name="M:VRH.Common.FixStack`1.#ctor(System.UInt16)">
            <summary>
            Constructor A megadott elemszámű stacket definiálja
            </summary>
            <param name="capacity">Maximális elemszám</param>
        </member>
        <member name="F:VRH.Common.FixStack`1._capacity">
            <summary>
            Kapacítás
            </summary>
        </member>
        <member name="P:VRH.Common.FixStack`1.Capacity">
            <summary>
            Kapacítás
            </summary>
        </member>
        <member name="P:VRH.Common.FixStack`1.Items">
            <summary>
            A tárolt elemeket visszadja egy listában (Az első elem az utoljára bedobott, és így megyünk a korábban bedobottak felé)
            </summary>
        </member>
        <member name="M:VRH.Common.FixStack`1.DropItem(`0)">
            <summary>
            Bedob egy elemet a stackbe
            </summary>
            <param name="item">Elem</param>
        </member>
        <member name="F:VRH.Common.FixStack`1._queue">
            <summary>
            queue az elemek gyűjtésére
            </summary>
        </member>
        <member name="F:VRH.Common.FixStack`1._locker">
            <summary>
            Instance level locker a többszálú környezetben való működéshez
            </summary>
        </member>
        <member name="T:VRH.Common.HourGlass">
            <summary>
            Kurzor váltása homokóra ikonra az alkalmazás teljes felületére
            Használata:
            using (new HourGlass()) {
              hosszú művelet...
            }
            </summary>
        </member>
        <member name="T:VRH.Common.SyncLogger">
            <summary>
            Thread-safe szinkron file logger, azzal a kitétellel, hogy a konstruktorában megadott file-t
            csak ezen az osztályon keresztül használhatják konkurrens szálak!
            </summary>
        </member>
        <member name="T:VRH.Common.TickTiming">
            <summary>
            TickCount alapú timing függvényeket összegyűjtő osztály
            </summary>
        </member>
        <member name="M:VRH.Common.TickTiming.IsTimeout(System.Int64,System.Int64,System.Int64)">
            <summary>
            A kapott paraméterek alapján megmondja, hogy letelt-e a timeout
            </summary>
            <param name="startTickTime">Kezdő időpont</param>
            <param name="nowTickTime">Végidőpont</param>
            <param name="timeout">Ennyi a timout (ms)</param>
            <returns>True, ha timout-nál több idő telt el, startTickTime és nowTickTime közt, egyébként false</returns>
        </member>
        <member name="M:VRH.Common.TickTiming.GetTickTimeDiff(System.Int64,System.Int64)">
            <summary>
            Visszadja a két TickCount-ot jelképező paraméter közt eltelt időt
            </summary>
            <param name="startTickTime">start TickCount</param>
            <param name="endTickTime">end TickCount</param>
            <returns>startTickcount és endTickCount közti idő (ms)</returns>
        </member>
        <member name="T:VRH.Common.TickCounter">
            <summary>
            Egyszerűsített időmérő és timeout kezelő osztály
            THREAD SAFE
            </summary>
        </member>
        <member name="M:VRH.Common.TickCounter.Reset">
            <summary>
            Alapállapotba helyezi a TickCounter-t
            </summary>
        </member>
        <member name="M:VRH.Common.TickCounter.GetElapsedTime">
            <summary>
            Az eltelt időt adja vissza
            </summary>
            <returns>az alapállapot óta eltelt TimeSpan időszelet</returns>
        </member>
        <member name="M:VRH.Common.TickCounter.GetRemainTime(System.TimeSpan)">
            <summary>
            A maradék időt adja vissza egy Timout-hoz képest, 0 a legkisebb értéke
            </summary>
            <returns>az alapállapot óta eltelt TimeSpan időszelet</returns>
        </member>
        <member name="M:VRH.Common.TickCounter.IsTimeout(System.TimeSpan)">
            <summary>
            Visszadja, hogy letelt-e a paraméterben megadott timeout
            </summary>
            <param name="timeout">Timeout</param>
            <returns>True, ha timout-nál több idő telt el az alapállapot óta</returns>
        </member>
        <member name="T:VRH.Common.VrhArray">
            <summary>
            Tömbökkel kapcsolatos segédfüggvények osztálya
            </summary>
        </member>
        <member name="M:VRH.Common.VrhArray.IndexOfPattern``1(``0[],``0[],System.Int32)">
            <summary>
            Egy tömbben megkeresi az első pozicióját egy másik tömbnek
            </summary>
            <param name="array">A tömb amiben keres</param>
            <param name="pattern">A keresendő tömb</param>
            <param name="startIndex">A tömbben ettől a poziciótól keres</param>
            <returns>Az első találat indexe a teljes tömbben, ha nem talált, akkor -1</returns>
        </member>
        <member name="M:VRH.Common.VrhArray.LastIndexOfPattern``1(``0[],``0[],System.Int32)">
            <summary>
            Egy tömbben megkeresi az utolsó pozicióját egy másik tömbnek
            </summary>
            <param name="array">A tömb amiben keres</param>
            <param name="pattern">A keresendő tömb</param>
            <param name="startIndex">A tömbben ettől a poziciótól keres</param>
            <returns>Az utolsó találat indexe a teljes tömbben, ha nem talált, akkor -1</returns>
        </member>
        <member name="M:VRH.Common.VrhArray.ReplacePatternInArray``1(``0[]@,``0[],``0[],System.Int32,System.Boolean)">
            <summary>
            Egy tömbben cserél ki egy tömbrészt egy másik tömbbre
            </summary>
            <param name="array">A tömb amiben cserélni kell</param>
            <param name="oldPattern">A cserélendő tömb</param>
            <param name="newPattern">Az új tömb</param>
            <param name="startIndex">A tömbben ettől a poziciótól cserél</param>
            <returns>A cserék száma</returns>
        </member>
        <member name="M:VRH.Common.VrhArray.LargeArrayToChunks``1(``0[],System.Int32)">
            <summary>
            Egy tömböt szeletel fel egy adott méretű tömbökre
            </summary>
            <param name="array">A szeletelendő tömb</param>
            <param name="maxChunkSize">Maximálisan ekkora méretűre szeleteli a tömböt, az utolsó szelet lehet kisebb</param>
            <returns>Ebbe a tömbbe kerülnek a szeletek</returns>
        </member>
        <member name="T:VRH.Common.VrhConvert">
            <summary>
            Konvertálással kapcsolatos segédfüggvények osztálya
            </summary>
        </member>
        <member name="M:VRH.Common.VrhConvert.ByteArrayToHexString(System.Byte[])">
            <summary>
            Bájt típusú tömböt hexadecimális string-re konvertál
            </summary>
            <param name="array">A konvertálandó tömb</param>
            <returns>A konvertált hexadecimális string (UpperCase)</returns>
        </member>
        <member name="M:VRH.Common.VrhConvert.HexStringToByteArray(System.String)">
            <summary>
            Egy hexadecimális sztringet konvertál bájt típusú tömbre 
            </summary>
            <param name="hexaString">A konvertálandó hexadecimális formátumú sztring</param>
            <returns>A konvertált bájt típusú tömb</returns>
        </member>
        <member name="M:VRH.Common.VrhConvert.HexControlChars(System.String)">
            <summary>
            A megadott sztring kontrolkaraktereit hex formátummá alakítja.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:VRH.Common.VrhConvert.SerializeObject(System.Object)">
            <summary>
            Objektum szerializálása.
            </summary>
            <param name="serializableObject">A szerializálandó objektum.</param>
            <returns></returns>
        </member>
        <member name="M:VRH.Common.VrhConvert.ConvertInt32ValueArrayToString(System.Int32[])">
            <summary>
            Konvertál egy Int32 elemekből álló tömböt emberi fogyasztásra alaklamas stringé (a tömb értékei ;-vel elválasztva)
            </summary>
            <param name="intvaluearray"></param>
            <returns></returns>
        </member>
        <member name="M:VRH.Common.VrhString.IsHexaString(System.String)">
            <summary>
            Egy sztringről eldönti, hogy érvényes hexadecimális számjegyeket tartalmaz-e
            </summary>
            <param name="test">A tesztelni kívánt karakterlánc</param>
            <returns>Ha csak érvényes hexa számokat tartalmaz, akkor true, ha nem akkor false</returns>
        </member>
    </members>
</doc>
